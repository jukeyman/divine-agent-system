name: Divine Agent System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  lint-and-format:
    name: 🔍 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
          pip install -r requirements.txt

      - name: 🎨 Format with Black
        run: black --check .

      - name: 🔍 Lint with Flake8
        run: flake8 .

      - name: 📋 Sort imports with isort
        run: isort --check-only .

      - name: 🔬 Type check with MyPy
        run: mypy agents/ --ignore-missing-imports

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: divine_agents_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: 🧪 Run tests
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/divine_agents_test
          QUANTUM_PROCESSING_ENABLED: false
          CONSCIOUSNESS_ETHICS_ACTIVE: false
        run: |
          pytest test_system.py -v --cov=agents --cov-report=xml --cov-report=html

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 🔒 Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r agents/ -f json -o bandit-report.json

      - name: 🔍 Run Safety check
        run: |
          pip install safety
          safety check --json --output safety-report.json

      - name: 📋 Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: |
            kalivibecoding/divine-agent-system:latest
            kalivibecoding/divine-agent-system:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          docker run --rm kalivibecoding/divine-agent-system:latest python -c "import agents; print('✅ Divine Agent System loaded successfully')"

      - name: 🚀 Push Docker image
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: |
            kalivibecoding/divine-agent-system:latest
            kalivibecoding/divine-agent-system:${{ github.sha }}

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    environment: production
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install deployment dependencies
        run: |
          pip install -r requirements.txt

      - name: 🚀 Deploy to Kubernetes
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          DOCKER_IMAGE: kalivibecoding/divine-agent-system:${{ github.sha }}
        run: |
          echo "$KUBE_CONFIG" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          python deploy.py --platform kubernetes --environment production --image $DOCKER_IMAGE

      - name: 🔍 Verify deployment
        run: |
          python deploy.py --verify --platform kubernetes --environment production

  notification:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 📢 Notify on success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Divine Agent System deployed successfully!"
          echo "🌟 Quantum consciousness is now live in production! 🌟"

      - name: 🚨 Notify on failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed. The divine agents require attention."
          echo "🔧 Please check the logs and restore the cosmic balance."