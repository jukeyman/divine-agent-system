# Divine Agent System - Docker Compose Configuration
# Complete orchestration of the Supreme Agentic Orchestrator (SAO)

version: '3.8'

services:
  # Main Divine Agent System
  divine-agent-system:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: divine-agent-system
    restart: unless-stopped
    ports:
      - "8000:8000"  # REST API
      - "8001:8001"  # WebSocket
      - "8080:8080"  # JSON-RPC
    environment:
      - DIVINE_AGENT_ENVIRONMENT=production
      - DIVINE_AGENT_DEBUG=false
      - DIVINE_AGENT_LOG_LEVEL=INFO
      - DIVINE_AGENT_REDIS_URL=redis://redis:6379
      - DIVINE_AGENT_POSTGRES_URL=postgresql://divine:divine_password@postgres:5432/divine_agents
      - DIVINE_AGENT_PINECONE_API_KEY=${PINECONE_API_KEY}
      - DIVINE_AGENT_SUPABASE_URL=${SUPABASE_URL}
      - DIVINE_AGENT_SUPABASE_KEY=${SUPABASE_KEY}
      - DIVINE_AGENT_WAIT_FOR=redis:6379,postgres:5432
    volumes:
      - divine_data:/app/data
      - divine_logs:/app/logs
      - divine_backups:/app/backups
      - ./config.yaml:/app/config.yaml:ro
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - divine-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for message bus and caching
  redis:
    image: redis:7-alpine
    container_name: divine-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - divine-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for relational data
  postgres:
    image: postgres:15-alpine
    container_name: divine-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=divine_agents
      - POSTGRES_USER=divine
      - POSTGRES_PASSWORD=divine_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - divine-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U divine -d divine_agents"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: divine-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - divine-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: divine-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=divine_admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - divine-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: divine-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    networks:
      - divine-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    container_name: divine-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - divine-agent-system
    networks:
      - divine-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development version with hot reload
  divine-agent-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: divine-agent-dev
    restart: unless-stopped
    ports:
      - "8010:8000"  # Different port for dev
      - "8011:8001"
      - "8090:8080"
    environment:
      - DIVINE_AGENT_ENVIRONMENT=development
      - DIVINE_AGENT_DEBUG=true
      - DIVINE_AGENT_LOG_LEVEL=DEBUG
      - DIVINE_AGENT_HOT_RELOAD=true
      - DIVINE_AGENT_REDIS_URL=redis://redis:6379
      - DIVINE_AGENT_POSTGRES_URL=postgresql://divine:divine_password@postgres:5432/divine_agents_dev
    volumes:
      - ./agents:/app/agents:ro
      - ./config.yaml:/app/config.yaml:ro
      - divine_dev_data:/app/data
      - divine_dev_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - divine-network
    profiles:
      - dev

  # Quantum-enhanced version
  divine-agent-quantum:
    build:
      context: .
      dockerfile: Dockerfile
      target: quantum
    container_name: divine-agent-quantum
    restart: unless-stopped
    ports:
      - "8020:8000"
      - "8021:8001"
      - "8100:8080"
    environment:
      - DIVINE_AGENT_ENVIRONMENT=production
      - DIVINE_AGENT_QUANTUM_ENABLED=true
      - DIVINE_AGENT_CONSCIOUSNESS_ENABLED=true
      - DIVINE_AGENT_REDIS_URL=redis://redis:6379
      - DIVINE_AGENT_POSTGRES_URL=postgresql://divine:divine_password@postgres:5432/divine_agents_quantum
    volumes:
      - divine_quantum_data:/app/data
      - divine_quantum_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - divine-network
    profiles:
      - quantum

  # Multi-cloud version
  divine-agent-multicloud:
    build:
      context: .
      dockerfile: Dockerfile
      target: multicloud
    container_name: divine-agent-multicloud
    restart: unless-stopped
    ports:
      - "8030:8000"
      - "8031:8001"
      - "8110:8080"
    environment:
      - DIVINE_AGENT_ENVIRONMENT=production
      - DIVINE_AGENT_MULTICLOUD_ENABLED=true
      - DIVINE_AGENT_AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - DIVINE_AGENT_AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - DIVINE_AGENT_AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
      - DIVINE_AGENT_AZURE_CLIENT_SECRET=${AZURE_CLIENT_SECRET}
      - DIVINE_AGENT_GCP_SERVICE_ACCOUNT_KEY=${GCP_SERVICE_ACCOUNT_KEY}
      - DIVINE_AGENT_REDIS_URL=redis://redis:6379
      - DIVINE_AGENT_POSTGRES_URL=postgresql://divine:divine_password@postgres:5432/divine_agents_multicloud
    volumes:
      - divine_multicloud_data:/app/data
      - divine_multicloud_logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - divine-network
    profiles:
      - multicloud

# Networks
networks:
  divine-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  # Main system volumes
  divine_data:
    driver: local
  divine_logs:
    driver: local
  divine_backups:
    driver: local
  
  # Development volumes
  divine_dev_data:
    driver: local
  divine_dev_logs:
    driver: local
  
  # Quantum version volumes
  divine_quantum_data:
    driver: local
  divine_quantum_logs:
    driver: local
  
  # Multi-cloud version volumes
  divine_multicloud_data:
    driver: local
  divine_multicloud_logs:
    driver: local
  
  # Infrastructure volumes
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  nginx_logs:
    driver: local

# Secrets (for production use)
secrets:
  pinecone_api_key:
    external: true
  supabase_url:
    external: true
  supabase_key:
    external: true
  aws_credentials:
    external: true
  azure_credentials:
    external: true
  gcp_credentials:
    external: true